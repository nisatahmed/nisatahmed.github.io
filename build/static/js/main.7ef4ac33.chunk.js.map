{"version":3,"sources":["components/Nav.js","components/About.js","components/Home.js","components/NotFound.js","components/Terms.js","components/Routers.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Nav","to","About","fd","useState","data","setData","name","setName","onSubmit","e","preventDefault","trim","FormData","append","fetch","method","body","then","r","text","res","className","type","value","onChange","target","map","i","style","marginTop","Math","random","Home","useEffect","JSON","parse","length","textAlign","elm","roll","NotFound","Terms","Routers","exact","path","component","App","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7ef4ac33.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Fragment } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nfunction Nav() {\r\n    return (\r\n        <Fragment>\r\n            <Link to=\"/\">Home page</Link><br />\r\n            <Link to=\"/about\">About page</Link><br />\r\n            <Link to=\"/terms\">Terms page</Link><br />\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default Nav\r\n","import React, { useState } from 'react'\r\n\r\nfunction About() {\r\n\r\n    const [data,setData] = useState([]);\r\n    const [name,setName] = useState('');\r\n    let fd\r\n\r\n\r\n    const onsubmitHandler = (e)=>{\r\n        e.preventDefault();\r\n        if(name.trim() == '') return;\r\n        fd = new FormData();\r\n        fd.append('assname',name)\r\n        fetch('/post',{\r\n            method: 'POST',\r\n            body:fd\r\n        })\r\n        .then(r=>r.text())\r\n        .then(res=>{\r\n            setData([...data,res]);\r\n            setName('')\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>This is About</h1>\r\n            <form onSubmit={onsubmitHandler}>\r\n                <div className=\"input-group\">\r\n                    <input type=\"text\" className=\"form-control\" value={name} onChange={e=>{setName(e.target.value)}} />\r\n                    <button type=\"submit\" className=\"btn btn-primary\">Send data</button>\r\n                </div>\r\n            </form>\r\n            {\r\n                data.map(i=>{\r\n                    return <div className='card' style={{marginTop:'10px'}} key={Math.random()}>\r\n                            <div className=\"card-body\">\r\n                                {i}\r\n                            </div>\r\n                        </div>\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default About\r\n","import React, { useEffect, useState } from 'react';\r\n\r\n\r\nfunction Home() {\r\n\r\n    const [data,setData] = useState([]);\r\n\r\n    useEffect(()=>{\r\n        fetch('/api',{\r\n            method: 'POST'\r\n        })\r\n        .then(r=>r.text())\r\n        .then(res=>{\r\n            setData(JSON.parse(res))\r\n        })\r\n    },[])\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h1>This is Home</h1>\r\n            {\r\n                data.length == 0 ? <h1>Hello world</h1> : <table className=\"table table-bordered\">\r\n                    <thead>\r\n                        <tr style={{textAlign:'center'}}>\r\n                            <th>Name</th>\r\n                            <th>Roll</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {\r\n                        data.map(elm=>{\r\n                            return <tr key={elm.roll}>\r\n                                <td>{elm.name}</td>\r\n                                <td>{elm.roll}</td>\r\n                            </tr>\r\n                        })\r\n                    }\r\n                    </tbody>\r\n                </table>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home\r\n","import React from 'react'\r\n\r\nfunction NotFound() {\r\n    return (\r\n        <div>\r\n            <h1><code>Page not found</code></h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NotFound\r\n","import React, { useState } from 'react'\r\n\r\nfunction Terms() {\r\n    const [name,setName] = useState('')\r\n    return (\r\n        <div>\r\n            <h1>This is Terms</h1>\r\n            <div className=\"container p-5 m-5\">\r\n                <p>\r\n                    {name}\r\n                </p>\r\n                <input type=\"text\" className=\"form-control\" value={name} onChange={e=>{setName(e.target.value)}} />\r\n                </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Terms\r\n","import React from 'react'\r\nimport { Route, Switch } from 'react-router-dom'\r\nimport About from './About'\r\nimport Home from './Home'\r\nimport NotFound from './NotFound'\r\nimport Terms from './Terms'\r\n\r\nfunction Routers() {\r\n    return (\r\n        <Switch>\r\n            <Route exact path=\"/\" component={Home} />\r\n            <Route exact path=\"/about\" component={About} />\r\n            <Route exact path=\"/terms\" component={Terms} />\r\n            <Route component={NotFound} />\r\n        </Switch>\r\n    )\r\n}\r\n\r\nexport default Routers\r\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport './App.css';\nimport Nav from './components/Nav';\nimport Routers from './components/Routers';\n\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Nav />\n      <Routers />\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}